import{B as k,D as z,E as D,F as K,G as L,T as O,I as H,J as b,K as F,M as q,N as W,Q as U,R as j,V as $,W as G,X as f,Y as V,Z as P,_ as Y,$ as B,a0 as J,P as Q,a1 as X,a2 as Z}from"./kit.B5hTzwHX.js";class ee extends k{constructor({docsPath:a}={}){super(["Could not find an Account to execute with this Action.","Please provide an Account with the `account` argument on the Action, or by supplying an `account` to the WalletClient."].join(`
`),{docsPath:a,docsSlug:"account"}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"AccountNotFoundError"})}}function te({chain:e,currentChainId:a}){if(!e)throw new z;if(a!==e.id)throw new D({chain:e,currentChainId:a})}function ne(e,{docsPath:a,...t}){const s=(()=>{const o=K(e,t);return o instanceof L?e:o})();return new O(s,{docsPath:a,...t})}async function ae(e,a){var g,h,E,N;const{account:t=e.account,chain:s=e.chain,accessList:o,blobs:n,data:r,gas:d,gasPrice:y,maxFeePerBlobGas:i,maxFeePerGas:p,maxPriorityFeePerGas:T,nonce:v,to:w,value:C,...x}=a;if(!t)throw new ee({docsPath:"/docs/actions/wallet/sendTransaction"});const l=G(t);try{H(a);let c;if(s!==null&&(c=await b(e,F,"getChainId")({}),te({currentChainId:c,chain:s})),l.type==="local"){const A=await b(e,q,"prepareTransactionRequest")({account:l,accessList:o,blobs:n,chain:s,chainId:c,data:r,gas:d,gasPrice:y,maxFeePerBlobGas:i,maxFeePerGas:p,maxPriorityFeePerGas:T,nonce:v,parameters:[...W,"sidecars"],to:w,value:C,...x}),R=(g=s==null?void 0:s.serializers)==null?void 0:g.transaction,_=await l.signTransaction(A,{serializer:R});return await b(e,U,"sendRawTransaction")({serializedTransaction:_})}const I=(N=(E=(h=e.chain)==null?void 0:h.formatters)==null?void 0:E.transactionRequest)==null?void 0:N.format,M=(I||j)({...$(x,{format:I}),accessList:o,blobs:n,data:r,from:l.address,gas:d,gasPrice:y,maxFeePerBlobGas:i,maxFeePerGas:p,maxPriorityFeePerGas:T,nonce:v,to:w,value:C});return await e.request({method:"eth_sendTransaction",params:[M]},{retryCount:0})}catch(c){throw ne(c,{...a,account:l,chain:a.chain||void 0})}}async function S(e,a){const{abi:t,address:s,args:o,dataSuffix:n,functionName:r,...d}=a,y=f({abi:t,args:o,functionName:r});return b(e,ae,"sendTransaction")({data:`${y}${n?n.replace("0x",""):""}`,to:s,...d})}const se=[{type:"constructor",inputs:[{name:"host_",type:"address",internalType:"address"},{name:"admin_",type:"address",internalType:"address"},{name:"registrar_",type:"address",internalType:"address"},{name:"recoveryAddress_",type:"address",internalType:"address payable"}],stateMutability:"nonpayable"},{type:"receive",stateMutability:"payable"},{type:"function",name:"admin",inputs:[],outputs:[{name:"",type:"address",internalType:"address"}],stateMutability:"view"},{type:"function",name:"allowClaim",inputs:[{name:"player",type:"address",internalType:"address"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"canPlayerClaim",inputs:[{name:"player",type:"address",internalType:"address"}],outputs:[{name:"canClaim",type:"bool",internalType:"bool"}],stateMutability:"view"},{type:"function",name:"claim",inputs:[{name:"seasonIdx",type:"uint32",internalType:"uint32"},{name:"recipient",type:"address",internalType:"address payable"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"closeSeason",inputs:[{name:"seasonIdx",type:"uint32",internalType:"uint32"}],outputs:[],stateMutability:"payable"},{type:"function",name:"confirmationConsumedBlock",inputs:[{name:"confirmationNonce",type:"uint256",internalType:"uint256"}],outputs:[{name:"block",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"currentSeasonIdx",inputs:[],outputs:[{name:"",type:"uint32",internalType:"uint32"}],stateMutability:"view"},{type:"function",name:"currentSeasonPrize",inputs:[],outputs:[{name:"prize",type:"uint96",internalType:"uint96"}],stateMutability:"view"},{type:"function",name:"host",inputs:[],outputs:[{name:"",type:"address",internalType:"address"}],stateMutability:"view"},{type:"function",name:"isValidPlayer",inputs:[{name:"player",type:"address",internalType:"address"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"view"},{type:"function",name:"multicall",inputs:[{name:"data",type:"bytes[]",internalType:"bytes[]"}],outputs:[{name:"results",type:"bytes[]",internalType:"bytes[]"}],stateMutability:"nonpayable"},{type:"function",name:"operators",inputs:[{name:"player",type:"address",internalType:"address"},{name:"operator",type:"address",internalType:"address"}],outputs:[{name:"isPermitted",type:"bool",internalType:"bool"}],stateMutability:"view"},{type:"function",name:"playerCodeCount",inputs:[{name:"seasonIdx",type:"uint32",internalType:"uint32"}],outputs:[{name:"playerCount_",type:"uint32",internalType:"uint32"}],stateMutability:"view"},{type:"function",name:"playerCodeHash",inputs:[{name:"seasonIdx",type:"uint32",internalType:"uint32"},{name:"player",type:"address",internalType:"address"}],outputs:[{name:"codeHash",type:"bytes32",internalType:"bytes32"}],stateMutability:"view"},{type:"function",name:"playerCount",inputs:[],outputs:[{name:"",type:"uint32",internalType:"uint32"}],stateMutability:"view"},{type:"function",name:"playerRegisteredBlock",inputs:[{name:"player",type:"address",internalType:"address"}],outputs:[{name:"block",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"recoveryAddress",inputs:[],outputs:[{name:"",type:"address",internalType:"address payable"}],stateMutability:"view"},{type:"function",name:"refund",inputs:[{name:"amount",type:"uint256",internalType:"uint256"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"register",inputs:[{name:"player",type:"address",internalType:"address"},{name:"confirmation",type:"tuple",internalType:"struct Confirmation",components:[{name:"expiry",type:"uint256",internalType:"uint256"},{name:"nonce",type:"uint256",internalType:"uint256"},{name:"metadata",type:"bytes",internalType:"bytes"},{name:"r",type:"bytes32",internalType:"bytes32"},{name:"s",type:"bytes32",internalType:"bytes32"},{name:"v",type:"uint8",internalType:"uint8"}]}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"registrar",inputs:[],outputs:[{name:"",type:"address",internalType:"address"}],stateMutability:"view"},{type:"function",name:"replaceAdmin",inputs:[{name:"newAdmin",type:"address",internalType:"address"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"replaceHost",inputs:[{name:"newHost",type:"address",internalType:"address"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"replaceRegistrar",inputs:[{name:"newRegistrar",type:"address",internalType:"address"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"restore",inputs:[{name:"seasonIdx",type:"uint32",internalType:"uint32"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"retire",inputs:[{name:"player",type:"address",internalType:"address"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"revealSeasonKey",inputs:[{name:"seasonIdx",type:"uint32",internalType:"uint32"},{name:"seasonPrivKey",type:"bytes",internalType:"bytes"}],outputs:[],stateMutability:"payable"},{type:"function",name:"seasonState",inputs:[{name:"seasonIdx",type:"uint32",internalType:"uint32"}],outputs:[{name:"",type:"uint8",internalType:"enum SeasonState"}],stateMutability:"view"},{type:"function",name:"setOperator",inputs:[{name:"operator",type:"address",internalType:"address"},{name:"permitted",type:"bool",internalType:"bool"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"startSeason",inputs:[{name:"seasonIdx",type:"uint32",internalType:"uint32"},{name:"seasonPubKey",type:"bytes",internalType:"bytes"},{name:"prevWinner",type:"address",internalType:"address"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"staticMulticall",inputs:[{name:"data",type:"bytes[]",internalType:"bytes[]"}],outputs:[{name:"results",type:"bytes[]",internalType:"bytes[]"}],stateMutability:"view"},{type:"function",name:"submitCode",inputs:[{name:"seasonIdx",type:"uint32",internalType:"uint32"},{name:"player",type:"address",internalType:"address"},{name:"codeHash",type:"bytes32",internalType:"bytes32"},{name:"submission",type:"tuple",internalType:"struct EncryptedCodeSubmission",components:[{name:"encryptedAesKey",type:"bytes",internalType:"bytes"},{name:"encryptedCode",type:"bytes",internalType:"bytes"},{name:"iv",type:"bytes12",internalType:"bytes12"}]}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"totalUnclaimedPrize",inputs:[],outputs:[{name:"",type:"uint96",internalType:"uint96"}],stateMutability:"view"},{type:"function",name:"winner",inputs:[{name:"seasonIdx",type:"uint32",internalType:"uint32"}],outputs:[{name:"winner_",type:"address",internalType:"address"},{name:"prize_",type:"uint96",internalType:"uint96"},{name:"unclaimedPrize_",type:"uint96",internalType:"uint96"}],stateMutability:"view"},{type:"event",name:"AdminReplaced",inputs:[{name:"oldAdmin",type:"address",indexed:!0,internalType:"address"},{name:"newAdmin",type:"address",indexed:!1,internalType:"address"}],anonymous:!1},{type:"event",name:"CodeCommitted",inputs:[{name:"season",type:"uint32",indexed:!0,internalType:"uint32"},{name:"player",type:"address",indexed:!0,internalType:"address"},{name:"codeHash",type:"bytes32",indexed:!1,internalType:"bytes32"},{name:"submission",type:"tuple",indexed:!1,internalType:"struct EncryptedCodeSubmission",components:[{name:"encryptedAesKey",type:"bytes",internalType:"bytes"},{name:"encryptedCode",type:"bytes",internalType:"bytes"},{name:"iv",type:"bytes12",internalType:"bytes12"}]}],anonymous:!1},{type:"event",name:"HostReplaced",inputs:[{name:"oldHost",type:"address",indexed:!0,internalType:"address"},{name:"newHost",type:"address",indexed:!1,internalType:"address"}],anonymous:!1},{type:"event",name:"OperatorSet",inputs:[{name:"player",type:"address",indexed:!0,internalType:"address"},{name:"operator",type:"address",indexed:!0,internalType:"address"},{name:"permitted",type:"bool",indexed:!1,internalType:"bool"}],anonymous:!1},{type:"event",name:"PlayerAllowedToClaim",inputs:[{name:"player",type:"address",indexed:!0,internalType:"address"}],anonymous:!1},{type:"event",name:"PrizeClaimed",inputs:[{name:"season",type:"uint32",indexed:!0,internalType:"uint32"},{name:"winner",type:"address",indexed:!0,internalType:"address"},{name:"prize",type:"uint256",indexed:!1,internalType:"uint256"}],anonymous:!1},{type:"event",name:"PrizeRestored",inputs:[{name:"season",type:"uint32",indexed:!0,internalType:"uint32"},{name:"prize",type:"uint256",indexed:!1,internalType:"uint256"}],anonymous:!1},{type:"event",name:"Registered",inputs:[{name:"player",type:"address",indexed:!0,internalType:"address"},{name:"metadata",type:"bytes",indexed:!1,internalType:"bytes"}],anonymous:!1},{type:"event",name:"RegistrarReplaced",inputs:[{name:"oldRegistrar",type:"address",indexed:!0,internalType:"address"},{name:"newRegistrar",type:"address",indexed:!1,internalType:"address"}],anonymous:!1},{type:"event",name:"Retired",inputs:[{name:"season",type:"uint32",indexed:!0,internalType:"uint32"},{name:"player",type:"address",indexed:!0,internalType:"address"}],anonymous:!1},{type:"event",name:"SeasonClosed",inputs:[{name:"season",type:"uint32",indexed:!0,internalType:"uint32"}],anonymous:!1},{type:"event",name:"SeasonRevealed",inputs:[{name:"season",type:"uint32",indexed:!0,internalType:"uint32"},{name:"privateKey",type:"bytes",indexed:!1,internalType:"bytes"}],anonymous:!1},{type:"event",name:"SeasonStarted",inputs:[{name:"season",type:"uint32",indexed:!0,internalType:"uint32"},{name:"publicKey",type:"bytes",indexed:!1,internalType:"bytes"}],anonymous:!1},{type:"event",name:"WinnerDeclared",inputs:[{name:"season",type:"uint32",indexed:!0,internalType:"uint32"},{name:"winner",type:"address",indexed:!0,internalType:"address"},{name:"prize",type:"uint256",indexed:!1,internalType:"uint256"}],anonymous:!1},{type:"error",name:"AccessError",inputs:[]},{type:"error",name:"AlreadyClaimedError",inputs:[]},{type:"error",name:"AlreadyRegisteredError",inputs:[]},{type:"error",name:"ConfirmationConsumedError",inputs:[]},{type:"error",name:"InsufficientBalanceError",inputs:[]},{type:"error",name:"InvalidCodeHashError",inputs:[]},{type:"error",name:"InvalidConfirmationError",inputs:[]},{type:"error",name:"InvalidKeyError",inputs:[]},{type:"error",name:"InvalidPlayerError",inputs:[]},{type:"error",name:"NotAllowedToClaimError",inputs:[]},{type:"error",name:"NotRegisteredError",inputs:[]},{type:"error",name:"NotSeasonError",inputs:[]},{type:"error",name:"NotWinnerError",inputs:[]},{type:"error",name:"PlayerSubmissionError",inputs:[]},{type:"error",name:"PreviousSeasonNotRevealedError",inputs:[]},{type:"error",name:"SeasonNotActiveError",inputs:[]},{type:"error",name:"SeasonNotClosedError",inputs:[]},{type:"error",name:"TooSoonError",inputs:[]}],ve=Number(Z),m=V,ie=X,u=se,re=u.filter(e=>e.type==="event");async function oe(e){return P(e.client,{address:m,abi:u,functionName:e.fn,account:e.from,args:e.args})}async function we(e){return S(e.client,{account:e.client.account,chain:e.client.chain,address:m,abi:u,functionName:e.fn,args:e.args})}async function pe(e){const a=await P(e.client,{address:m,abi:u,functionName:"multicall",args:[e.calls.map(t=>f({abi:u,functionName:t.fn,args:t.args}))]});return[...e.calls.entries()].map(([t,{fn:s}])=>{const o=u.find(r=>r.type==="function"&&r.name===s),n=Y(o.outputs,a[t]);return o.outputs.length===1?n[0]:n})}async function Ce(e){const a=await S(e.client,{account:e.client.account,chain:e.client.chain,address:m,abi:u,functionName:"multicall",args:[e.calls.map(s=>f({abi:u,functionName:s.fn,args:s.args}))]});if((await B(e.client,{hash:a})).status!=="success")throw new Error("Transaction reverted")}async function ue(e,a,t){const s=BigInt(t||ie),o=a.map(n=>typeof n=="string"?{name:n}:n);return(await Promise.all(o.map(n=>e.getLogs({address:m,event:re.find(r=>r.name===n.name),args:n.args??void 0,fromBlock:s})))).flat(1)}async function xe(e,a){const t=await B(e,{hash:a});if(t.status!=="success")throw new Error("Transaction failed");return t}var ye=(e=>(e[e.Inactive=0]="Inactive",e[e.Started=1]="Started",e[e.Closed=2]="Closed",e[e.Revealed=3]="Revealed",e))(ye||{});async function ge(e){var y;const{blockNumber:a,events:t}=await le(),[s,o]=await Promise.all([ce(e,a+1),oe({client:e,fn:"currentSeasonPrize"})]),n=de([...t,...s]),r=[];for(const i of n)if(i.eventName==="SeasonStarted")r.push({idx:i.season,startBlock:i.eventBlockNumber,closedBlock:null,startTime:new Date,closedTime:null,prize:0n,state:1,winner:null,unclaimedPrize:0n,privateKey:null,publicKey:i.publicKey,isTerminal:((y=r[r.length-1])==null?void 0:y.publicKey)===i.publicKey,submissionsCount:0});else if(i.eventName==="SeasonClosed"){const p=r[i.season];p.state=2,p.closedBlock=i.eventBlockNumber,p.closedTime=new Date}else if(i.eventName==="SeasonRevealed"){const p=r[i.season];p.state=3,p.privateKey=i.privateKey}else if(i.eventName==="WinnerDeclared"){const p=r[i.season];p.winner=i.winner,p.prize=p.unclaimedPrize=i.prize}else if(i.eventName==="PrizeClaimed"){const p=r[i.season];p.prize=i.prize,p.unclaimedPrize=0n}{const i=r[r.length-1];(i==null?void 0:i.state)===1&&(i.unclaimedPrize=i.prize=o)}const[d]=await Promise.all([pe({client:e,calls:r.map((i,p)=>({fn:"playerCodeCount",args:[p]}))}),me(e,r)]);for(let i=0;i<r.length;++i)r[i].submissionsCount=d[i];return r}function de(e){const a=e.map(t=>BigInt(t.eventBlockNumber)<<64n|BigInt(t.eventTransactionIndex)<<32n|BigInt(t.eventLogIndex));return e.map((t,s)=>s).sort((t,s)=>J(a[t],a[s])).map(t=>e[t])}async function le(){const e=await fetch(`${Q}/indexed/seasons?`);if(!e.ok)throw new Error("Failed to fetch indexed data");return e.json()}async function ce(e,a){return(await ue(e,["SeasonStarted","SeasonClosed","SeasonRevealed","WinnerDeclared","PrizeClaimed"],a)).map(s=>({eventId:"",eventBlockNumber:Number(s.blockNumber),eventTransactionIndex:s.transactionIndex,eventLogIndex:s.logIndex,eventName:s.eventName,...s.args}))}async function me(e,a){const t=Object.values(Object.assign({},...a.map(n=>[n.startBlock,n.closedBlock]).flat(1).filter(n=>typeof n=="number").map(n=>({[n]:n})))),s=await be(e,t),o=Object.assign({},...t.map((n,r)=>({[n]:s[r]})));for(const n of a)n.startTime=o[n.startBlock],n.closedBlock&&(n.closedTime=o[n.closedBlock]);return a}async function be(e,a){return Promise.all(a.map(async t=>{const s=`${e.chain.id}/blockTime/${t}`,o=await localStorage.getItem(s);if(o)return new Date(Number(o));const n=await e.getBlock({blockNumber:BigInt(t)}),r=Number(n.timestamp)*1e3;return await localStorage.setItem(s,r.toString()),new Date(r)}))}export{ee as A,m as C,ye as S,xe as a,Ce as b,te as c,S as d,ve as e,ge as f,pe as m,oe as r,ae as s,we as w};
